# Grade 1. Этап 2: Задание 5
# Задание: Удаление заметок


from datetime import datetime       # Вызов библиотеки datetime


def make_dict(id_note):                      # Функция создания заметки, входное значение "количество заметок"
    all_dict = {'ID:': '',
                'Имя:': '',
                'Заголовок:': '',
                'Описание:': '',
                'Статус:': '',
                'Дата создания:': '',
                'Дедлайн:': ''}

    def check_user_date(user_date):         # Функция проверки правильного формата даты, входное значение "создание" или "дедлайн"
        while True:
            # Запрос пользовательской даты
            issue_date = input(
                f'Введите дату {user_date} (день-месяц-год или год-месяц-день): ')
            try:
                # проверка на формат дд-мм-ГГГГ
                value_date = datetime.strptime(issue_date, '%d-%m-%Y').date()
                break
            except ValueError:              # Игнорирование ошибки о неправильном значении даты
                try:
                    # Проверка введеной даты на формат ГГГГ-мм-дд
                    value_date = datetime.strptime(
                        issue_date, '%Y-%m-%d').date()
                    # Перевод даты в формат дд-мм-ГГГГ
                    issue_date = value_date.strftime('%d-%m-%Y')
                    break
                except ValueError:                      # Игнорирование ошибки о неправильном значении даты
                    print('')
                    # Вывод сообщения для пользователя о недопустимом формате даты
                    print(
                        'Убедитесь, что вводите дату в формате день-месяц-год или год-месяц-день, например: 01-12-2024.')
                    print('')
                    continue                            # Переход к началу цикла о запросе даты
        # Возврат значения даты в соответствующую переменную
        return (issue_date)

    for i in all_dict.keys():               # Запрос пользовательских данных по имеющимся полям
        if i == 'ID:':                      # Установка ID заметки
            all_dict['ID:'] = id_note
            continue
        if i == 'Дата создания:':           # Запрос даты создания заметки с использованием функции проверки даты
            all_dict['Дата создания:'] = check_user_date('создания')
        elif i == 'Дедлайн:':               # Запрос даты дедлайна заметки с использованием функции проверки даты
            all_dict['Дедлайн:'] = check_user_date('дедлайна')
        elif i == 'Статус:':                # Запрос статуса с предложениями ввода
            all_dict[i] = input(
                f'Введите статус заметки (новая, в процессе, выполнено): ')
        else:
            # Ввод пользовательских значений
            all_dict[i] = input(f'Введите {i} ')
            # Значения по умолчанию для пустого заголовка
            if all_dict['Заголовок:'] == '':
                all_dict['Заголовок:'] = 'Пустой заголовок'
            # Значения по умолчанию для пустого описания
            elif all_dict['Описание:'] == '':
                all_dict['Описание:'] = 'Без описания'
    return (all_dict)                     # Возврат готового словаря

list_notes = []     # Создание списка
count_note = 1000   # Счетчик заметок и их ID
choose_do = ['1 - Добавить заметку.',
             '2 - Просмотреть все заметки.',
             '3 - Удалить заметку.',
             '4 - Выход'
             ]

print('\nДобро пожаловать в "Менеджер заметок"!\n')

# Условие работы цикла по созданию заметок, выполняется пока пользоваатель не скажет 'нет'
making_note = True

while making_note:
    print('\n'.join(choose_do))
    # Ввод ответа не зависит от регистра
    add_note = input(
        'Что вы хотите сделать? (Введите номер): ')

    if add_note == '1':
        # Команда 'Добавить заметку.'
        count_note += 1
        print('\nСоздание новой заметки.')
        # Добавление полученных данных в основной словарь
        list_notes.append(make_dict(str(count_note)))

    elif add_note == '2':
        # Команда на просмотр всех заметок
        if list_notes == []:
            print('\nВы не создали ни одной заметки.')
        else:
            print(f'\nУ вас {len(list_notes)} заметок')
            print('Вот текущий список ваших заметок:\n')
            # Вывод на экран списка каждый элемент которого является отдельной заметкой
            for i in range(len(list_notes)):
                # Вывод каждой заметки в виде словаря
                for keys_00, value_00 in list_notes[i].items():
                    print(keys_00, value_00)
                print('')

    elif add_note == '3':           # Удаление заметки
        del_note = {}               # Временный словарь для хранение заметки на удаление
        count_del = 0               # Счетчик совпадений
        # Запрос по какому ID или имени или заголовку произвести удаление заметки
        num_del = input(
            'Введите ID или имя пользователя или заголовок для удаления заметки: ').capitalize()
        for i in range(len(list_notes)):
            for keys_00, value_00 in list_notes[i].items():
                if value_00 == num_del:         # Поиск совпадений
                    del_note = list_notes[i]    # Выбор нужной заметки
                    count_del += 1              # Количество заметок с одинаковым идентификатором
            print('')
        if count_del > 1:                       # Обнаружено больше одной заметки
            print(
                f'Выявлено больше одного совпадения по метке {num_del}, введите другой идентификатор.')
        elif count_del == 0:                    # Заметок с таким запросом не обнаружено
            print('Заметок с таким ID или именем пользователя или заголовком не найдено.')
        else:
            conf_del_note = 'V'
            while conf_del_note != 'Нет':       # Запрос на подтверждение удаления
                # Запрос Да/Нет не зависит от регистра
                conf_del_note = input(
                    'Вы уверены что хотите удалить заметку? Да/Нет - ').capitalize()
                if conf_del_note == 'Да':
                    list_notes.remove(del_note)             # Удаление заметки
                    print('Заметка успешно удалена.')
                    break
                elif conf_del_note == 'Нет':                # Отмена удаления
                    print('Удаление отменено.')
                    break
                else:
                    print('Команда не распознана.')

    elif add_note == '4':
        # Команда 'Выход' Прерывание цикла
        print('\nУдачного дня.\n')
        making_note = False
    else:
        print('\nНекорректный ответ')
